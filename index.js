// ===== Khai b√°o bi·∫øn v√† l·∫•y ph·∫ßn t·ª≠ giao di·ªán =====
const chunkSizeInput = document.getElementById('chunkSize');
const startBtn = document.getElementById("startBtn");
const pauseBtn = document.getElementById("pauseBtn");
const stopBtn = document.getElementById("stopBtn");

// ========== ENHANCED POPUP LOGGING ==========
let popupStartTime = Date.now();
let popupLogCounter = 0;

// H√†m log cho popup v·ªõi timestamp v√† counter
function popupLog(level, message, ...args) {
    popupLogCounter++;
    const now = Date.now();
    const uptime = Math.round((now - popupStartTime) / 1000);
    const timestamp = new Date(now).toLocaleTimeString();
    
    const prefix = `[${timestamp}] [POPUP:${uptime}s] [${popupLogCounter}] [${level}]`;
    
    switch(level) {
        case 'INFO':
            console.log(`üîµ ${prefix}`, message, ...args);
            break;
        case 'WARN':
            console.warn(`üü° ${prefix}`, message, ...args);
            break;
        case 'ERROR':
            console.error(`üî¥ ${prefix}`, message, ...args);
            break;
        case 'DEBUG':
            console.log(`üîß ${prefix}`, message, ...args);
            break;
        case 'UI':
            console.log(`üé® ${prefix}`, message, ...args);
            break;
        default:
            console.log(`‚ö™ ${prefix}`, message, ...args);
    }
}

// Log kh·ªüi ƒë·ªông popup
popupLog('INFO', 'üöÄ GSC Tool Popup Initialized', {
    startTime: new Date(popupStartTime).toLocaleString(),
    url: window.location.href
});

// ========== BACKGROUND QUEUE ELEMENTS ==========
const backgroundModeCheckbox = document.getElementById('backgroundModeCheckbox');
const queueStatusDiv = document.getElementById('queue-status');
const pauseQueueBtn = document.getElementById('pauseQueueBtn');
const resumeQueueBtn = document.getElementById('resumeQueueBtn');
const stopQueueBtn = document.getElementById('stopQueueBtn');
const downloadQueueBtn = document.getElementById('downloadQueueBtn');
const queueProgressFill = document.getElementById('queueProgressFill');
const queueProgress = document.getElementById('queueProgress');
const queueStatus = document.getElementById('queueStatus');

// ========== INFO TABLE ELEMENTS ==========
const packInfoTable = document.querySelector('.info-table-container');
const queueInfoTable = document.querySelector('.queue-info-table-container');
const queueTotalUrls = document.querySelector('.queue-total-urls');
const queueSuccessUrls = document.querySelector('.queue-success-urls');
const queueErrorUrls = document.querySelector('.queue-error-urls');

let temporaryRemoval = true;
let chunkSize = parseInt(document.getElementById('chunkSize')?.value || 10, 10);
let urlChunks = [];
let currentPack = 0;
let autoRun = false;
let isPaused = false;
let sentPackCount = 0;
let sentUrlCount = 0;
let isFileInput = false;

// ========== BACKGROUND QUEUE VARIABLES ==========
let backgroundQueueActive = false;
let queueUpdateInterval = null;

/**
 * Chia m·∫£ng th√†nh c√°c pack nh·ªè theo chunkSize
 */
function splitIntoChunks(array, chunkSize) {
  const results = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    results.push(array.slice(i, i + chunkSize));
  }
  return results;
}

/**
 * Th√™m th√¥ng b√°o l·ªói ho·∫∑c tr·∫°ng th√°i v√†o giao di·ªán
 */
function insertElement(type, message, parentClass) {
  const container = document.getElementsByClassName(parentClass)[0];
  const element = document.createElement(type);
  element.textContent = message;
  element.style.color = 'red';
  container.appendChild(element);
  
  popupLog('UI', 'Element inserted:', { type, message, parentClass });
}

/**
 * ƒê·∫∑t l·∫°i th√¥ng tin b·∫£ng v√† b·ªô nh·ªõ cache
 */
function resetInfoTableAndCache() {
  popupLog('INFO', 'Resetting info table and cache');
  
  chrome.storage.local.set({
    totalPack: 0,
    totalUrl: 0,
    urlSuccess: 0,
    urlError: 0,
    allUrls: [],
    resultLinks: [],
    failedLinks: []
  }, () => {
    document.querySelector('.total-pack').textContent = 0;
    document.querySelector('.total-url').textContent = 0;
    document.querySelector('.url-success').textContent = 0;
    document.querySelector('.url-error').textContent = 0;
    
    popupLog('INFO', 'Info table and cache reset completed');
  });
}

/**
 * C·∫≠p nh·∫≠t textarea v√† pack info theo currentPack
 */
function updatePackDisplay() {
  const packInfo = document.getElementById('packInfo');
  packInfo.textContent = `Pack ${urlChunks.length ? (currentPack + 1) : 0}/${urlChunks.length}`;
  document.getElementById('prevPackBtn').disabled = currentPack === 0;
  document.getElementById('nextPackBtn').disabled = currentPack === urlChunks.length - 1 || urlChunks.length === 0;
  document.getElementById('links').value = urlChunks[currentPack] ? urlChunks[currentPack].join('\n') : '';
}

/**
 * C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng s·ªë pack v√† t·ªïng URL
 */
function updatePackStats() {
  document.querySelector('.total-pack').textContent = urlChunks.length;
  const totalUrl = urlChunks.reduce((sum, pack) => sum + pack.length, 0);
  document.querySelector('.total-url').textContent = totalUrl;
}

/**
 * C·∫≠p nh·∫≠t b·∫£ng th·ªëng k√™ t·ª´ cache (ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë·ªông)
 */
function updateInfoTableFromCache() {
  chrome.storage.local.get(['urlSuccess', 'urlError'], (cache) => {
    document.querySelector('.url-success').textContent = cache.urlSuccess || 0;
    document.querySelector('.url-error').textContent = cache.urlError || 0;
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh g·ª≠i t·∫•t c·∫£ URL
 */
function notifyDoneAll() {
  const messagesDiv = document.getElementById('messages');
  messagesDiv.textContent = "ƒê√£ g·ª≠i xong t·∫•t c·∫£ URL ƒë·ªÉ xo√° tr√™n GSC!";
  messagesDiv.style.color = "#43a047";
  setTimeout(() => { messagesDiv.textContent = ""; }, 5000);
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh pack
 */
function notifyPackDoneAuto() {
  const messagesDiv = document.getElementById('messages');
  messagesDiv.textContent = `ƒê√£ g·ª≠i xong pack ${currentPack + 1}/${urlChunks.length}`;
  messagesDiv.style.color = "#1976d2";
  setTimeout(() => { messagesDiv.textContent = ""; }, 1500);
}

/**
 * X·ª≠ l√Ω khi ch·ªçn file input, ƒë·ªçc file v√† chia pack
 */
function handleFileSelect(event) {
  isFileInput = true;
  resetInfoTableAndCache();
  autoRun = false;
  isPaused = false;
  currentPack = 0;
  urlChunks = [];
  sentPackCount = 0;
  sentUrlCount = 0;
  document.querySelector('.sent-pack').textContent = 0;
  document.querySelector('.sent-url').textContent = 0;
  document.getElementById('packInfo').textContent = 'Pack 0/0';
  updatePackStats();
  startBtn.disabled = false;
  pauseBtn.textContent = 'T·∫°m d·ª´ng';
  pauseBtn.style.background = '#ffc107';
  pauseBtn.style.color = '#333';

  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(fileLoadEvent) {
    const text = fileLoadEvent.target.result;
    parseLinksFromText(text).then((links) => {
      if (links.length > 0) {
        chrome.storage.local.set({ allUrls: links });
        chunkSize = parseInt(document.getElementById('chunkSize').value, 10) || 10;
        urlChunks = splitIntoChunks(links, chunkSize).filter(pack => pack.length > 0);
        currentPack = 0;
        updatePackDisplay();
        updatePackStats();
      } else {
        document.getElementById('links').value = '';
        document.getElementById('packInfo').textContent = 'Pack 0/0';
        updatePackStats();
      }
    }).catch((error) => {
      console.error('L·ªói ph√¢n t√≠ch URL:', error);
      insertElement('p', error, "errors")
    });
  };
  reader.readAsText(file);
}

/**
 * Ph√¢n t√≠ch danh s√°ch URL t·ª´ text, ki·ªÉm tra ƒë·ªãnh d·∫°ng, l·ªçc URL h·ª£p l·ªá
 */
async function parseLinksFromText(text) {
  const errorsContainer = document.getElementsByClassName("errors")[0];
  errorsContainer.innerHTML = "";

  const lines = text.split(/\r?\n|,/);

  const urls = lines
    .map(line => line.trim())
    .map((line, idx) => ({ line, idx }))
    .filter(({ line, idx }) => {
      if (!line) return false;
      const isUrl = isValidUrlAdvanced(line);
      if (!isUrl) {
        insertElement('p', `D√≤ng ${idx + 1}: ${line} kh√¥ng ph·∫£i URL h·ª£p l·ªá.`, "errors");
        return false;
      }
      return true;
    })
    .map(({ line }) => line);

  if (urls.length === 0) {
    insertElement('p', 'Kh√¥ng c√≥ URL h·ª£p l·ªá ƒë·ªÉ xo√°.', "errors");
  }

  return urls;
}

/**
 * X√°c th·ª±c URL n√¢ng cao (http/https, domain, path)
 */
function isValidUrlAdvanced(url) {
  const regex = /^(https?:\/\/)([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/[^\s]*)?$/;
  try {
    new URL(url);
    return regex.test(url);
  } catch {
    return false;
  }
}

// ===== S·ª± ki·ªán ch√≠nh =====

/**
 * S·ª± ki·ªán click n√∫t B·∫Øt ƒë·∫ßu: ki·ªÉm tra d·ªØ li·ªáu, x√°c nh·∫≠n s·ªë l∆∞·ª£ng l·ªõn, chia pack n·∫øu c·∫ßn v√† b·∫Øt ƒë·∫ßu g·ª≠i
 */
startBtn.addEventListener("click", async function() {
  popupLog('INFO', 'üöÄ Start button clicked');
  
  if (!isFileInput && urlChunks.length === 0) {
    const text = document.getElementById('links').value;
    const links = await parseLinksFromText(text);
    if (links.length > 0) {
      chunkSize = parseInt(document.getElementById('chunkSize').value, 10) || 10;
      urlChunks = splitIntoChunks(links, chunkSize).filter(pack => pack.length > 0);
      currentPack = 0;
      updatePackDisplay();
      updatePackStats && updatePackStats();
      chrome.storage.local.set({ allUrls: links });
      
      popupLog('INFO', 'üì¶ URLs processed:', {
        totalUrls: links.length,
        chunkSize,
        totalPacks: urlChunks.length
      });
    } else {
      urlChunks = [];
      updatePackDisplay();
      updatePackStats && updatePackStats();
      alert("Kh√¥ng c√≥ URL h·ª£p l·ªá ƒë·ªÉ g·ª≠i!");
      popupLog('WARN', '‚ö†Ô∏è No valid URLs found');
      return;
    }
  }

  const totalUrl = urlChunks.reduce((sum, pack) => sum + pack.length, 0);
  if (totalUrl > 100) {
    const ok = confirm(`B·∫°n s·∫Øp g·ª≠i ${totalUrl} URL. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?`);
    if (!ok) {
      popupLog('INFO', 'üö´ User cancelled large URL batch');
      return;
    }
  }

  autoRun = document.getElementById('autoRunCheckbox').checked;
  popupLog('INFO', 'üéØ Processing mode:', autoRun ? 'Auto-run' : 'Manual');

  if (autoRun) {
    autoRunAllPacks();
  } else {
    await clickStartBtn();
  }
});

/**
 * S·ª± ki·ªán click n√∫t T·∫°m d·ª´ng/Ti·∫øp t·ª•c: ƒë·ªïi tr·∫°ng th√°i, ƒë·ªïi m√†u v√† ch·ªØ n√∫t
 */
pauseBtn.addEventListener('click', function() {
  isPaused = !isPaused;
  chrome.storage.sync.set({ isPaused });
  if (isPaused) {
    pauseBtn.textContent = 'Ti·∫øp t·ª•c';
    pauseBtn.style.background = '#4caf50';
    pauseBtn.style.color = '#fff';
  } else {
    pauseBtn.textContent = 'T·∫°m d·ª´ng';
    pauseBtn.style.background = '#ffc107';
    pauseBtn.style.color = '#333';
  }
});

/**
 * S·ª± ki·ªán click n√∫t K·∫øt th√∫c: reset to√†n b·ªô tr·∫°ng th√°i, giao di·ªán, d·ªØ li·ªáu
 */
stopBtn.addEventListener('click', function() {
  isFileInput = false;
  autoRun = false;
  isPaused = false;
  currentPack = 0;
  urlChunks = [];
  sentPackCount = 0;
  sentUrlCount = 0;
  document.querySelector('.sent-pack').textContent = 0;
  document.querySelector('.sent-url').textContent = 0;
  startBtn.disabled = false;
  pauseBtn.textContent = 'T·∫°m d·ª´ng';
  pauseBtn.style.background = '#ffc107';
  pauseBtn.style.color = '#333';
  chunkSize = 10;
  chunkSizeInput.value = 10;
  document.getElementById('links').value = '';
  document.getElementById('packInfo').textContent = 'Pack 1/1';
  resetInfoTableAndCache();
  chrome.storage.sync.set({
    isPaused: false,
    isStopped: true,
    pausedIndex: null,
    running: false,
    currentUrlIndex: null,
    totalInPack: null,
    URLs: [],
    temporaryRemoval: true
  });
  document.getElementById('fileInput').value = '';
  document.getElementById('messages').textContent = '';
  document.getElementsByClassName('errors')[0].innerHTML = '';
});

// ===== G·ª≠i pack =====

/**
 * G·ª≠i pack hi·ªán t·∫°i (theo currentPack)
 */
async function clickStartBtn() {
  const URLs = urlChunks[currentPack] || [];
  if (URLs.length > 0) {
    chrome.storage.sync.set({
      URLs: URLs,
      temporaryRemoval: temporaryRemoval
    });

    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      chrome.scripting.executeScript({
        target: { tabId: tabs[0].id },
        files: ["url.js"]
      });
    });
  } else {
    setTimeout(() => {
      alert("Kh√¥ng c√≥ g√¨ ƒë·ªÉ xo√° trong pack n√†y.")
    }, 200)
  }
}

/**
 * G·ª≠i t·ª± ƒë·ªông t·∫•t c·∫£ c√°c pack (autoRun)
 */
async function autoRunAllPacks() {
  if (!autoRun || isPaused) return;
  await clickStartBtn();
}

// ===== L·∫Øng nghe khi pack xong ƒë·ªÉ chuy·ªÉn pack ti·∫øp theo n·∫øu auto =====

/**
 * L·∫Øng nghe khi pack xong ƒë·ªÉ chuy·ªÉn pack ti·∫øp theo n·∫øu auto
 */
chrome.runtime.onMessage.addListener(async function(msg, sender, sendResponse) {
  if (msg.type === "PACK_DONE") {
    updateInfoTableFromCache();

    sentPackCount++;
    sentUrlCount += urlChunks[currentPack] ? urlChunks[currentPack].length : 0;
    document.querySelector('.sent-pack').textContent = sentPackCount;
    document.querySelector('.sent-url').textContent = sentUrlCount;

    if (autoRun && !isPaused && currentPack < urlChunks.length - 1) {
      notifyPackDoneAuto(); // Th√™m d√≤ng n√†y
      currentPack++;
      updatePackDisplay();
      setTimeout(async () => {
        await clickStartBtn();
      }, 1000);
    } else {
      autoRun = false;
      startBtn.disabled = false;
      notifyDoneAll();
    }
  }

  // X·ª≠ l√Ω c√°c th√¥ng ƒëi·ªáp li√™n quan ƒë·∫øn background queue
  if (msg.type === "QUEUE_COMPLETED") {
    backgroundQueueActive = false;
    updateQueueUI();
    clearInterval(queueUpdateInterval);
    updateQueueInfoFromStorage(); // C·∫≠p nh·∫≠t l·∫ßn cu·ªëi khi ho√†n th√†nh
    showMessage(`üéâ Background queue ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω ${msg.totalProcessed} URLs.`, 'success');
  }
  
  // Listen for individual URL completion ƒë·ªÉ update real-time
  if (msg.type === "QUEUE_URL_PROCESSED") {
    updateQueueInfoFromStorage();
  }
});

// ===== S·ª± ki·ªán chuy·ªÉn pack =====

/**
 * Chuy·ªÉn pack v·ªÅ tr∆∞·ªõc 1
 */
document.getElementById('prevPackBtn').addEventListener('click', () => {
  if (currentPack > 0) {
    currentPack--;
    updatePackDisplay();
  }
});

/**
 * Chuy·ªÉn pack v·ªÅ sau 1
 */
document.getElementById('nextPackBtn').addEventListener('click', () => {
  if (currentPack < urlChunks.length - 1) {
    currentPack++;
    updatePackDisplay();
  }
});

/**
 * Chuy·ªÉn l√πi 10 pack
 */
document.getElementById('firstPackBtn').addEventListener('click', () => {
  if (currentPack > 0) {
    currentPack = Math.max(0, currentPack - 10);
    updatePackDisplay();
  }
});

/**
 * Chuy·ªÉn ti·∫øn 10 pack
 */
document.getElementById('lastPackBtn').addEventListener('click', () => {
  if (currentPack < urlChunks.length - 1) {
    currentPack = Math.min(urlChunks.length - 1, currentPack + 10);
    updatePackDisplay();
  }
});

// ===== ƒê·ªçc file khi ch·ªçn file m·ªõi =====
document.getElementById('fileInput').addEventListener('change', handleFileSelect, false);

// ===== Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc g√≥i m·∫∑c ƒë·ªãnh t·ª´ storage =====
chrome.storage.sync.get(['chunkSize'], function(result) {
  if (result.chunkSize) {
    chunkSize = result.chunkSize;
    document.getElementById('chunkSize').value = chunkSize;
  }
});

// ===== G√°n s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc g√≥i cho input number =====

/**
 * Khi thay ƒë·ªïi s·ªë URL m·ªói pack, chia l·∫°i pack theo ngu·ªìn d·ªØ li·ªáu hi·ªán t·∫°i
 */
document.getElementById('chunkSize').addEventListener('change', async function() {
  const newSize = parseInt(this.value);
  if (newSize > 0 && newSize <= 100) {
    chunkSize = newSize;
    let allUrls = [];
    if (isFileInput) {
      allUrls = (await new Promise(resolve => {
        chrome.storage.local.get(['allUrls'], result => resolve(result.allUrls || []));
      }));
    } else {
      const text = document.getElementById('links').value;
      allUrls = await parseLinksFromText(text);
    }
    urlChunks = splitIntoChunks(allUrls, chunkSize).filter(pack => pack.length > 0);
    currentPack = 0;
    updatePackDisplay();
    updatePackStats();
  }
});

// ===== COMBINED POPUP STATE RESTORATION =====

/**
 * Kh√¥i ph·ª•c tr·∫°ng th√°i popup khi m·ªü l·∫°i (bao g·ªìm c·∫£ pack mode v√† queue mode)
 */
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üîÑ Popup loaded, checking all states...');
    
    try {
        // 1. Ki·ªÉm tra queue status v·ªõi timeout v√† retry
        const queueResponse = await checkQueueStatusWithRetry();
        
        console.log('üìä Queue status response:', queueResponse);
        
        // 2. N·∫øu c√≥ queue ƒëang ch·∫°y ng·∫ßm, ∆∞u ti√™n hi·ªÉn th·ªã queue mode
        if (queueResponse && queueResponse.backgroundMode && queueResponse.queueProcessing) {
            console.log('üîÑ Restoring queue mode UI...');
            
            // Activate queue mode
            backgroundQueueActive = true;
            backgroundModeCheckbox.checked = true;
            
            // Update UI ngay l·∫≠p t·ª©c
            updateQueueUI();
            
            // Start status updates
            startQueueStatusUpdates();
            
            // Update status immediately
            updateQueueStatus(queueResponse);
            
            console.log('‚úÖ Queue mode UI restored successfully');
            
            // RETURN EARLY - kh√¥ng load pack mode state n·ªØa
            return;
        }
        
        // 3. N·∫øu kh√¥ng c√≥ queue, load pack mode state
        console.log('üì¶ No active queue, loading pack mode state...');
        
        // Ensure queue mode is OFF
        backgroundQueueActive = false;
        updateQueueUI();
        
        // Load pack mode states
        chrome.storage.sync.get(['running', 'URLs', 'currentPack', 'currentUrlIndex', 'totalInPack', 'isPaused'], (data) => {
            if (data.running && Array.isArray(data.URLs) && data.URLs.length > 0) {
                document.getElementById('links').value = data.URLs.join('\n');
            }
            if (typeof data.currentPack === 'number' && urlChunks.length > 0) {
                currentPack = data.currentPack;
                updatePackDisplay();
            }
            if (typeof data.currentUrlIndex === 'number' && typeof data.totalInPack === 'number') {
                document.getElementById('messages').textContent =
                    `ƒêang g·ª≠i URL ${data.currentUrlIndex}/${data.totalInPack} trong pack ${currentPack + 1}`;
            }
            if (data.isPaused) {
                document.getElementById('messages').textContent += ' (ƒê√£ t·∫°m d·ª´ng)';
            }
        });
        
        // Load other statistics
        loadPackModeStats();
        
    } catch (error) {
        console.error('‚ùå Error checking states on load:', error);
        // Fallback to pack mode
        backgroundQueueActive = false;
        updateQueueUI();
    }
});

/**
 * Ki·ªÉm tra queue status v·ªõi retry mechanism
 */
async function checkQueueStatusWithRetry(maxRetries = 3, delay = 1000) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            console.log(`üîÑ Checking queue status (attempt ${i + 1}/${maxRetries})`);
            
            const response = await new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error('Timeout'));
                }, 5000);
                
                chrome.runtime.sendMessage({ type: "GET_QUEUE_STATUS" }, (response) => {
                    clearTimeout(timeout);
                    
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message));
                        return;
                    }
                    
                    resolve(response);
                });
            });
            
            // N·∫øu th√†nh c√¥ng v√† c√≥ data, return ngay
            if (response) {
                console.log(`‚úÖ Got queue status on attempt ${i + 1}:`, response);
                return response;
            }
            
            console.log(`‚ö†Ô∏è No queue data on attempt ${i + 1}, retrying...`);
            
        } catch (error) {
            console.log(`‚ùå Queue status check failed on attempt ${i + 1}:`, error.message);
            
            if (i === maxRetries - 1) {
                // Cu·ªëi c√πng v·∫´n fail, check t·ª´ storage tr·ª±c ti·∫øp
                console.log('üîç Fallback: checking queue status from storage...');
                return await checkQueueStatusFromStorage();
            }
        }
        
        // Wait before retry
        if (i < maxRetries - 1) {
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    
    return null;
}

/**
 * Fallback: ki·ªÉm tra queue status t·ª´ storage tr·ª±c ti·∫øp
 */
async function checkQueueStatusFromStorage() {
    try {
        const data = await new Promise((resolve) => {
            chrome.storage.local.get([
                'backgroundMode', 'queueProcessing', 'queuePaused', 'urlQueue', 'currentUrlIndex'
            ], resolve);
        });
        
        console.log('üìÅ Storage data:', data);
        
        if (data.backgroundMode && data.queueProcessing && data.urlQueue && data.urlQueue.length > 0) {
            return {
                backgroundMode: data.backgroundMode,
                queueProcessing: data.queueProcessing,
                queuePaused: data.queuePaused || false,
                currentUrlIndex: data.currentUrlIndex || 0,
                totalUrls: data.urlQueue.length,
                remainingUrls: data.urlQueue.length - (data.currentUrlIndex || 0)
            };
        }
        
        return null;
    } catch (error) {
        console.error('‚ùå Error checking storage:', error);
        return null;
    }
}

// ===== ƒê·ªçc config m·∫∑c ƒë·ªãnh n·∫øu c√≥ =====

/**
 * ƒê·ªçc config m·∫∑c ƒë·ªãnh t·ª´ file config.json n·∫øu c√≥
 */
let config = {
  chunkSize: 10,
  temporaryRemoval: true,
  autoRun: false
};

fetch('config.json')
  .then(response => response.json())
  .then(data => {
    config = data;
    chunkSize = config.chunkSize;
    document.getElementById('chunkSize').value = config.chunkSize;
    temporaryRemoval = config.temporaryRemoval;
    autoRun = config.autoRun;
    document.getElementById('chunkSize').value = chunkSize;
  })
  .catch(() => {
    // N·∫øu l·ªói th√¨ d√πng m·∫∑c ƒë·ªãnh
  });

// ===== N√∫t t·∫£i k·∫øt qu·∫£ CSV =====

/**
 * S·ª± ki·ªán click n√∫t t·∫£i k·∫øt qu·∫£ CSV: xu·∫•t file CSV v·ªõi id, url, k·∫øt qu·∫£, l√Ω do
 */
document.getElementById('downloadBtn').addEventListener('click', function() {
  chrome.storage.local.get(['resultLinks'], function(data) {
    const resultLinks = data.resultLinks || [];
    if (!resultLinks.length) {
      alert('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i!');
      return;
    }
    const header = 'id,url,k·∫øt qu·∫£,l√Ω do\n';
    const rows = resultLinks.map((r, idx) =>
      `${idx + 1},"${r.url || ''}","${r.status || ''}","${r.reason || ''}"`
    ).join('\n');
    const csvContent = header + rows;

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ket_qua.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });
});

// ========== BACKGROUND QUEUE FUNCTIONS ==========

/**
 * B·∫Øt ƒë·∫ßu background queue processing
 */
async function startBackgroundQueue(urls) {
    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        if (!tab.url.includes('search.google.com/search-console/removals')) {
            alert('Vui l√≤ng m·ªü trang Google Search Console Removals tr∆∞·ªõc!');
            return;
        }
        
        // Reset queue results tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        await chrome.storage.local.set({ queueResults: [] });
        
        // C·∫≠p nh·∫≠t queue info table v·ªõi s·ªë URLs ban ƒë·∫ßu
        console.log('üìä Updating queue info table with:', urls.length, 'URLs');
        updateQueueInfoTable(urls.length, 0, 0);
        
        console.log('üì§ Sending START_BACKGROUND_QUEUE message to background...');
        // G·ª≠i URLs ƒë·∫øn background script
        chrome.runtime.sendMessage({
            type: "START_BACKGROUND_QUEUE",
            urls: urls,
            tabId: tab.id
        });
        
        console.log('üîÑ Setting backgroundQueueActive = true');
        backgroundQueueActive = true;
        updateQueueUI();
        
        // ƒê·ª£i m·ªôt ch√∫t cho UI update xong
        setTimeout(() => {
            startQueueStatusUpdates();
        }, 500);
        
        // Hi·ªÉn th·ªã queue status v√† ·∫©n UI th∆∞·ªùng
        queueStatusDiv.classList.remove('hidden');
        downloadQueueBtn.classList.remove('hidden');
        
        showMessage(`‚úÖ Background queue ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi ${urls.length} URLs! 
        B·∫°n c√≥ th·ªÉ ƒë√≥ng popup, queue s·∫Ω x·ª≠ l√Ω t·ª´ng URL m·ªôt c√°ch tu·∫ßn t·ª±.
        M·ªói URL s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ho√†n to√†n tr∆∞·ªõc khi chuy·ªÉn sang URL ti·∫øp theo.`, 'success');
        
    } catch (error) {
        console.error('Error starting background queue:', error);
        showMessage('‚ùå L·ªói khi b·∫Øt ƒë·∫ßu background queue: ' + error.message, 'error');
    }
}

/**
 * C·∫≠p nh·∫≠t UI queue controls
 */
function updateQueueUI() {
    const bodyElement = document.body;
    
    console.log('üîÑ Updating UI, backgroundQueueActive:', backgroundQueueActive);
    
    if (backgroundQueueActive) {
        // Add class ƒë·ªÉ trigger CSS hiding
        bodyElement.classList.add('queue-mode-active');
        
        // Update checkbox state
        backgroundModeCheckbox.checked = true;
        // ·∫®n lu√¥n checkbox thay v√¨ disable
        const backgroundModeRow = backgroundModeCheckbox.closest('.form-group');
        if (backgroundModeRow) backgroundModeRow.classList.add('hidden');
        
        // Hide pack mode controls
        startBtn.classList.add('hidden');
        pauseBtn.classList.add('hidden');
        stopBtn.classList.add('hidden');
        
        // Hide pack navigation
        const packNavigation = document.querySelector('.pack-navigation');
        if (packNavigation) packNavigation.classList.add('hidden');
        
        // Hide auto run checkbox section
        const autoRunRow = document.getElementById('autoRunCheckbox')?.closest('.form-group');
        if (autoRunRow) autoRunRow.classList.add('hidden');
        
        // Hide chunk size input section
        const chunkRow = chunkSizeInput?.closest('.form-group');
        if (chunkRow) chunkRow.classList.add('hidden');
        
        // Hide download CSV button th∆∞·ªùng
        const downloadBtn = document.getElementById('downloadBtn');
        if (downloadBtn) downloadBtn.classList.add('hidden');
        
        // Hide pack mode info table v√† show queue info table
        if (packInfoTable) packInfoTable.classList.add('hidden');
        if (queueInfoTable) queueInfoTable.classList.remove('hidden');
        
        // Update queue info table v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
        updateQueueInfoFromStorage();
        
        // Show queue UI
        queueStatusDiv.classList.remove('hidden');
        downloadQueueBtn.classList.remove('hidden');
        
        // Update textarea placeholder
        const linksTextarea = document.getElementById('links');
        if (linksTextarea) {
            linksTextarea.placeholder = 'üîÑ Queue Mode: Paste URLs here (one per line)\nQueue ƒëang ch·∫°y ng·∫ßm...';
            linksTextarea.style.border = '2px solid #1976d2';
            linksTextarea.style.background = '#f3f8ff';
        }
        
        console.log('üîÑ Queue mode UI activated');
        
    } else {
        // Remove class ƒë·ªÉ hi·ªán l·∫°i UI
        bodyElement.classList.remove('queue-mode-active');
        
        // Reset checkbox
        backgroundModeCheckbox.checked = false;
        // Hi·ªán l·∫°i checkbox row
        const backgroundModeRow = backgroundModeCheckbox.closest('.form-group');
        if (backgroundModeRow) backgroundModeRow.classList.remove('hidden');
        
        // Show pack mode controls
        startBtn.classList.remove('hidden');
        pauseBtn.classList.remove('hidden');
        stopBtn.classList.remove('hidden');
        
        // Show pack navigation
        const packNavigation = document.querySelector('.pack-navigation');
        if (packNavigation) packNavigation.classList.remove('hidden');
        
        // Show auto run checkbox section
        const autoRunRow = document.getElementById('autoRunCheckbox')?.closest('.form-group');
        if (autoRunRow) autoRunRow.classList.remove('hidden');
        
        // Show chunk size input section
        const chunkRow = chunkSizeInput?.closest('.form-group');
        if (chunkRow) chunkRow.classList.remove('hidden');
        
        // Show download CSV button th∆∞·ªùng
        const downloadBtn = document.getElementById('downloadBtn');
        if (downloadBtn) downloadBtn.classList.remove('hidden');
        
        // Show pack mode info table v√† hide queue info table
        if (packInfoTable) packInfoTable.classList.remove('hidden');
        if (queueInfoTable) queueInfoTable.classList.add('hidden');
        
        // Hide queue UI
        queueStatusDiv.classList.add('hidden');
        downloadQueueBtn.classList.add('hidden');
        
        // Reset textarea
        const linksTextarea = document.getElementById('links');
        if (linksTextarea) {
            linksTextarea.placeholder = 'D√°n URL v√†o ƒë√¢y (m·ªôt URL m·ªói d√≤ng)';
            linksTextarea.style.border = '';
            linksTextarea.style.background = '';
        }
        
        console.log('üì¶ Pack mode UI activated');
    }
}

/**
 * B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i queue ƒë·ªãnh k·ª≥
 */
function startQueueStatusUpdates() {
  console.log('üîÑ Starting queue status updates...');
  
  if (queueUpdateInterval) {
    clearInterval(queueUpdateInterval);
  }
  
  queueUpdateInterval = setInterval(async () => {
    if (!backgroundQueueActive) {
      console.log('‚èπÔ∏è Queue not active, stopping updates');
      clearInterval(queueUpdateInterval);
      return;
    }
    
    console.log('üìä Requesting queue status...');
    
    try {
      chrome.runtime.sendMessage({ type: "GET_QUEUE_STATUS" }, (response) => {
        if (chrome.runtime.lastError) {
          console.error('‚ùå Runtime error:', chrome.runtime.lastError.message);
          return;
        }
        
        if (response) {
          console.log('‚úÖ Received queue status:', response);
          updateQueueStatus(response);
          // C·∫≠p nh·∫≠t queue info table real-time
          updateQueueInfoFromStorage();
        } else {
          console.log('‚ö†Ô∏è No response from background script');
        }
      });
    } catch (error) {
      console.error('‚ùå Error getting queue status:', error);
    }
  }, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y
}

/**
 * C·∫≠p nh·∫≠t hi·ªÉn th·ªã tr·∫°ng th√°i queue
 */
function updateQueueStatus(status) {
    if (!status) {
        popupLog('WARN', '‚ö†Ô∏è No queue status received');
        return;
    }
    
    const { currentUrlIndex, totalUrls, queueProcessing, queuePaused, backgroundMode } = status;
    
    popupLog('UI', 'üìä Updating queue status:', status);
    
    // C·∫≠p nh·∫≠t progress bar
    const progressPercent = totalUrls > 0 ? (currentUrlIndex / totalUrls) * 100 : 0;
    
    if (queueProgressFill) {
        queueProgressFill.style.width = progressPercent + '%';
        popupLog('DEBUG', '‚úÖ Progress bar updated:', queueProgressFill.style.width);
    } else {
        popupLog('ERROR', '‚ùå queueProgressFill element not found');
    }
    
    // C·∫≠p nh·∫≠t text hi·ªÉn th·ªã
    if (queueProgress) {
        queueProgress.textContent = `${currentUrlIndex}/${totalUrls}`;
        popupLog('DEBUG', '‚úÖ Progress text updated:', queueProgress.textContent);
    } else {
        popupLog('ERROR', '‚ùå queueProgress element not found');
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† controls
    if (!backgroundMode || !queueProcessing) {
        queueStatus.textContent = 'Ho√†n th√†nh';
        queueStatusDiv.className = 'queue-status queue-status--completed';
        pauseQueueBtn.classList.add('hidden');
        resumeQueueBtn.classList.add('hidden');
        stopQueueBtn.textContent = 'ƒê√≥ng';
    } else if (queuePaused) {
        queueStatus.textContent = 'ƒê√£ t·∫°m d·ª´ng';
        queueStatusDiv.className = 'queue-status queue-status--paused';
        pauseQueueBtn.classList.add('hidden');
        resumeQueueBtn.classList.remove('hidden');
    } else {
        queueStatus.textContent = 'ƒêang x·ª≠ l√Ω...';
        queueStatusDiv.className = 'queue-status queue-status--processing';
        pauseQueueBtn.classList.remove('hidden');
        resumeQueueBtn.classList.add('hidden');
    }
    
    // C·∫≠p nh·∫≠t header text
    const queueHeader = queueStatusDiv.querySelector('h4');
    if (queueHeader) {
        queueHeader.textContent = `üîÑ Background Queue (${currentUrlIndex}/${totalUrls})`;
    }
}

/**
 * T·∫£i k·∫øt qu·∫£ background queue
 */
function downloadQueueResults() {
  chrome.storage.local.get(['queueResults'], function(data) {
    const queueResults = data.queueResults || [];
    if (!queueResults.length) {
      alert('Kh√¥ng c√≥ d·ªØ li·ªáu queue ƒë·ªÉ t·∫£i!');
      return;
    }
    
    const header = 'STT,URL,K·∫øt qu·∫£,L√Ω do,Th·ªùi gian\n';
    const rows = queueResults.map(r =>
      `${r.id},"${r.url}","${r.status}","${r.reason || ''}","${r.timestamp || ''}"`
    ).join('\n');
    const csvContent = header + rows;

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `queue_results_${new Date().toISOString().slice(0,10)}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });
}

// ========== BACKGROUND QUEUE EVENT LISTENERS ==========

// Background mode checkbox change
backgroundModeCheckbox.addEventListener('change', function() {
  const isChecked = this.checked;
  
  popupLog('UI', 'üîÑ Background mode toggled:', isChecked);
  
  if (isChecked) {
    // ·∫®n c√°c controls kh√¥ng c·∫ßn thi·∫øt cho background mode
    document.querySelector('.pack-navigation').classList.add('hidden');
    document.getElementById('autoRunCheckbox').checked = false;
    
    // ·∫®n ho√†n to√†n autoRun row thay v√¨ disable
    const autoRunRow = document.getElementById('autoRunCheckbox').closest('.form-group');
    if (autoRunRow) autoRunRow.classList.add('hidden');
    
    // ·∫®n ho√†n to√†n chunk size row thay v√¨ disable
    const chunkRow = chunkSizeInput.closest('.form-group');
    if (chunkRow) chunkRow.classList.add('hidden');
    
    // Toggle info tables
    if (packInfoTable) packInfoTable.classList.add('hidden');
    if (queueInfoTable) queueInfoTable.classList.remove('hidden');
    resetQueueInfoTable(); // Reset v·ªÅ 0 khi chuy·ªÉn mode
  } else {
    // Hi·ªán l·∫°i controls
    document.querySelector('.pack-navigation').classList.remove('hidden');
    
    // Hi·ªán l·∫°i autoRun row
    const autoRunRow = document.getElementById('autoRunCheckbox').closest('.form-group');
    if (autoRunRow) autoRunRow.classList.remove('hidden');
    
    // Hi·ªán l·∫°i chunk size row
    const chunkRow = chunkSizeInput.closest('.form-group');
    if (chunkRow) chunkRow.classList.remove('hidden');
    
    // Toggle info tables
    if (packInfoTable) packInfoTable.classList.remove('hidden');
    if (queueInfoTable) queueInfoTable.classList.add('hidden');
  }
});

// Queue control buttons
pauseQueueBtn.addEventListener('click', function() {
  popupLog('UI', '‚è∏Ô∏è Pause queue button clicked');
  chrome.runtime.sendMessage({ type: "PAUSE_BACKGROUND_QUEUE" });
  showMessage('‚è∏Ô∏è Background queue ƒë√£ t·∫°m d·ª´ng', 'info');
});

resumeQueueBtn.addEventListener('click', function() {
  popupLog('UI', '‚ñ∂Ô∏è Resume queue button clicked');
  chrome.runtime.sendMessage({ type: "RESUME_BACKGROUND_QUEUE" });
  showMessage('‚ñ∂Ô∏è Background queue ƒë√£ ti·∫øp t·ª•c', 'info');
});

stopQueueBtn.addEventListener('click', function() {
  popupLog('UI', 'ÔøΩ Stop queue button clicked');
  if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën d·ª´ng background queue?')) {
    chrome.runtime.sendMessage({ type: "STOP_BACKGROUND_QUEUE" });
    backgroundQueueActive = false;
    updateQueueUI();
    clearInterval(queueUpdateInterval);
    showMessage('üõë Background queue ƒë√£ d·ª´ng', 'info');
  }
});

downloadQueueBtn.addEventListener('click', downloadQueueResults);

// Listen for queue completion
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.type === "QUEUE_COMPLETED") {
    backgroundQueueActive = false;
    updateQueueUI();
    clearInterval(queueUpdateInterval);
    updateQueueInfoFromStorage(); // C·∫≠p nh·∫≠t l·∫ßn cu·ªëi khi ho√†n th√†nh
    showMessage(`üéâ Background queue ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω ${message.totalProcessed} URLs.`, 'success');
  }
  
  // Listen for individual URL completion ƒë·ªÉ update real-time
  if (message.type === "QUEUE_URL_PROCESSED") {
    updateQueueInfoFromStorage();
  }
});

// ========== MODIFY START BUTTON FOR BACKGROUND MODE ==========
// C·∫≠p nh·∫≠t h√†m start ƒë·ªÉ h·ªó tr·ª£ background queue
const originalStartHandler = startBtn.onclick;
startBtn.onclick = async function() {
  const urls = getUrlsFromInput();
  
  if (!urls.length) {
    alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 URL!');
    return;
  }
  
  // Ki·ªÉm tra background mode
  if (backgroundModeCheckbox.checked) {
    await startBackgroundQueue(urls);
  } else {
    // Ch·∫°y mode th∆∞·ªùng
    if (originalStartHandler) {
      originalStartHandler.call(this);
    }
  }
};

/**
 * L·∫•y URLs t·ª´ input (textarea ho·∫∑c file)
 */
function getUrlsFromInput() {
  const linksTextarea = document.getElementById('links');
  const linksText = linksTextarea.value.trim();
  
  if (!linksText) {
    return [];
  }
  
  return linksText.split('\n')
    .map(url => url.trim())
    .filter(url => url.length > 0);
}

/**
 * C·∫≠p nh·∫≠t th·ªëng k√™ queue info table
 */
function updateQueueInfoTable(totalUrls = 0, successUrls = 0, errorUrls = 0) {
    if (queueTotalUrls) queueTotalUrls.textContent = totalUrls;
    if (queueSuccessUrls) queueSuccessUrls.textContent = successUrls;
    if (queueErrorUrls) queueErrorUrls.textContent = errorUrls;
}

/**
 * Reset queue info table v·ªÅ 0
 */
function resetQueueInfoTable() {
    updateQueueInfoTable(0, 0, 0);
}

/**
 * C·∫≠p nh·∫≠t queue info table t·ª´ storage v√† queue results
 */
function updateQueueInfoFromStorage() {
    chrome.storage.local.get(['queueResults', 'urlQueue'], (data) => {
        const queueResults = data.queueResults || [];
        const urlQueue = data.urlQueue || [];
        
        const successCount = queueResults.filter(r => r.status === 'success').length;
        const errorCount = queueResults.filter(r => r.status === 'error').length;
        
        updateQueueInfoTable(urlQueue.length, successCount, errorCount);
    });
}

/**
 * Load pack mode statistics and data
 */
function loadPackModeStats() {
    chrome.storage.local.get(['urlSuccess', 'urlError'], (data) => {
        if (data.urlSuccess) {
            document.querySelector('.url-success').textContent = data.urlSuccess;
        }
        if (data.urlError) {
            document.querySelector('.url-error').textContent = data.urlError;
        }
    });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o
 */
function showMessage(message, type = 'info') {
    const messagesDiv = document.getElementById('messages');
    if (messagesDiv) {
        messagesDiv.textContent = message;
        messagesDiv.style.color = type === 'error' ? '#f44336' : 
                                  type === 'success' ? '#4caf50' : '#1976d2';
        setTimeout(() => { 
            messagesDiv.textContent = ""; 
        }, type === 'error' ? 8000 : 5000);
        
        popupLog('UI', 'üí¨ Message shown:', { message, type });
    }
}

// ========== POPUP DEBUG OBJECT ==========
// Export cho console debugging
window.gscPopupDebug = {
    clearLogs: () => {
        console.clear();
        popupLogCounter = 0;
        popupStartTime = Date.now();
        popupLog('INFO', 'üßπ Popup logs cleared manually');
    },
    getPopupState: () => ({
        backgroundQueueActive,
        currentPack,
        totalPacks: urlChunks.length,
        autoRun,
        isPaused,
        popupUptime: Math.round((Date.now() - popupStartTime) / 1000),
        logCounter: popupLogCounter
    }),
    log: popupLog,
    // Quick access functions
    checkBackgroundStatus: () => {
        chrome.runtime.sendMessage({type: 'GET_QUEUE_STATUS'}, (response) => {
            popupLog('DEBUG', 'üîç Background status check:', response);
            return response;
        });
    },
    forceUIUpdate: () => {
        popupLog('DEBUG', 'üîÑ Forcing UI update...');
        checkAndUpdateUI();
    }
};

// Log khi popup ƒë∆∞·ª£c loaded ho√†n to√†n
document.addEventListener('DOMContentLoaded', () => {
    popupLog('INFO', '‚úÖ Popup DOM loaded completely');
});

// H∆∞·ªõng d·∫´n cho user trong console
setTimeout(() => {
    console.log('');
    console.log('üõ†Ô∏è  GSC Tool Debug Guide:');
    console.log('');
    console.log('üìñ ƒê·ªÉ hi·ªÉu v·ªÅ h·ªá th·ªëng log v√† khi n√†o log b·ªã reset:');
    console.log('   Xem file DEBUG_GUIDE_V2.md');
    console.log('');
    console.log('üîß Debug Commands (ch·∫°y trong console n√†y):');
    console.log('   gscPopupDebug.getPopupState()      - Xem tr·∫°ng th√°i popup');
    console.log('   gscPopupDebug.checkBackgroundStatus() - Ki·ªÉm tra background');
    console.log('   gscPopupDebug.clearLogs()          - X√≥a log popup');
    console.log('   gscPopupDebug.forceUIUpdate()      - Force c·∫≠p nh·∫≠t UI');
    console.log('');
    console.log('üîç ƒê·ªÉ xem background logs:');
    console.log('   1. V√†o chrome://extensions/');
    console.log('   2. B·∫≠t Developer mode');
    console.log('   3. Click "service worker" cho GSC Tool');
    console.log('   4. Trong background console, ch·∫°y: gscToolDebug.getQueueState()');
    console.log('');
    console.log('‚ö†Ô∏è  Log s·∫Ω B·ªä RESET khi:');
    console.log('   ‚Ä¢ Extension reload/update');
    console.log('   ‚Ä¢ Browser restart');
    console.log('   ‚Ä¢ Service Worker terminate (Chrome qu·∫£n l√Ω)');
    console.log('   ‚Ä¢ Manual clear console');
    console.log('');
    console.log('‚úÖ Log s·∫Ω TI·∫æP T·ª§C khi:');
    console.log('   ‚Ä¢ ƒê√≥ng/m·ªü popup');
    console.log('   ‚Ä¢ ƒê√≥ng/m·ªü tab GSC');
    console.log('   ‚Ä¢ Chuy·ªÉn tab kh√°c');
    console.log('   ‚Ä¢ Lock/unlock m√°y');
    console.log('');
}, 1000);










